package com.doubleblacksoftware.tracker;

import android.database.Cursor;
import android.graphics.Color;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.LoaderManager;
import android.support.v4.content.CursorLoader;
import android.support.v4.content.Loader;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Toast;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import lecho.lib.hellocharts.formatter.SimpleAxisValueFormatter;
import lecho.lib.hellocharts.listener.LineChartOnValueSelectListener;
import lecho.lib.hellocharts.model.Axis;
import lecho.lib.hellocharts.model.Line;
import lecho.lib.hellocharts.model.LineChartData;
import lecho.lib.hellocharts.model.PointValue;
import lecho.lib.hellocharts.view.LineChartView;

/**
 * Created by x on 5/22/15.
 */
public class hellograph extends Fragment implements
        LoaderManager.LoaderCallbacks<Cursor>{

    private LineChartView hellochart;

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        View view = inflater.inflate(R.layout.hellograph, container, false);
        hellochart = (LineChartView) view.findViewById(R.id.hellochart);
        getLoaderManager().initLoader(1, null, this);
        return view;
    }

    private void updateGraph(Cursor cursor) {
        List<PointValue> values = new ArrayList<>();
        cursor.moveToFirst();
        long time;

        while (cursor.isAfterLast() == false) {
            time = cursor.getLong(cursor.getColumnIndex("timestamp")) * 1000L;
            float value = cursor.getFloat(cursor.getColumnIndex("value"));
            values.add(new PointValue(time, value));
            cursor.moveToNext();
        }

        Line line = new Line(values).setColor(Color.parseColor("#44a134")).setCubic(true);
        line.setFilled(true);
        line.setHasLabels(true);
        List<Line> lines = new ArrayList<Line>();
        lines.add(line);

        LineChartData data = new LineChartData();
        data.setLines(lines);

        Axis timeAxis = new Axis();
        //timeAxis.setName("");
        //timeAxis.setTextColor(ChartUtils.COLOR_ORANGE);
        timeAxis.setMaxLabelChars(5);
        timeAxis.setFormatter(new TimestampAxisFormatter());
        timeAxis.setHasLines(true);
        timeAxis.setHasTiltedLabels(true);
        data.setAxisXBottom(timeAxis);

        Axis weightAxis = new Axis();
        //weightAxis.setName("");
        //weightAxis.setTextColor(ChartUtils.COLOR_GREEN);
        weightAxis.setMaxLabelChars(7);
        weightAxis.setFormatter(new SimpleAxisValueFormatter().setAppendedText(" lbs".toCharArray()));
        weightAxis.setHasLines(true);
        weightAxis.setHasTiltedLabels(true);
        data.setAxisYLeft(weightAxis);

        hellochart.setLineChartData(data);
        hellochart.setOnValueTouchListener(new ValueTouchListener());


        hellochart.invalidate();
    }

    private class ValueTouchListener implements LineChartOnValueSelectListener {

        @Override
        public void onValueSelected(int lineIndex, int pointIndex, PointValue value) {
            Calendar cal = Calendar.getInstance();
            SimpleDateFormat sdf = new SimpleDateFormat(list.format);
            cal.setTimeInMillis((long)value.getX());
            Toast.makeText(getActivity(), "Timestamp: " + sdf.format(cal.getTime()) + " \nWeight: " + value.getY(), Toast.LENGTH_SHORT).show();
        }

        @Override
        public void onValueDeselected() {
            // TODO Auto-generated method stub

        }

    }

    private static class TimestampAxisFormatter extends SimpleAxisValueFormatter {

        private Calendar cal = Calendar.getInstance();
        SimpleDateFormat sdf = new SimpleDateFormat("M/dd");

        @Override
        public int formatValueForAutoGeneratedAxis(char[] formattedValue, float value, int autoDecimalDigits) {
            cal.setTimeInMillis((long)value);
            char[] timestampA = sdf.format(cal.getTime()).toCharArray();
            System.arraycopy(timestampA, 0, formattedValue, formattedValue.length - timestampA.length, timestampA.length);
            return timestampA.length;
        }
    }

    @Override
    public Loader<Cursor> onCreateLoader(int loaderID, Bundle bundle)
    {
        String[] projection = { "_id", "value", "timestamp" };

        CursorLoader cursorLoader = new CursorLoader(getActivity(),
                ValueProvider.CONTENT_URI, projection, null, null, "timestamp");
        return cursorLoader;
    }

    @Override
    public void onLoadFinished(Loader<Cursor> loader, Cursor cursor) {

    /*
     * Moves the query results into the adapter, causing the
     * ListView fronting this adapter to re-display
     */
        updateGraph(cursor);
    }

    @Override
    public void onLoaderReset(Loader<Cursor> loader) {

    /*
     * Clears out the adapter's reference to the Cursor.
     * This prevents memory leaks.
     */
        //updateGraph(null);
    }
}
